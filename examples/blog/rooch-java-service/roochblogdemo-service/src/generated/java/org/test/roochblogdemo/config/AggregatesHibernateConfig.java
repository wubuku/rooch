// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.config;

import org.test.roochblogdemo.domain.article.*;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.domain.article.hibernate.*;
import org.test.roochblogdemo.domain.blog.*;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.domain.blog.hibernate.*;
import org.test.roochblogdemo.specialization.AggregateEventListener;
import org.test.roochblogdemo.specialization.EventStore;
import org.test.roochblogdemo.specialization.IdGenerator;
import org.test.roochblogdemo.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public CommentEventDao commentEventDao(SessionFactory hibernateSessionFactory) {
        HibernateCommentEventDao dao = new HibernateCommentEventDao();
        dao.setSessionFactory(hibernateSessionFactory);
        return dao;
    }

    @Bean
    public ArticleStateRepository articleStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateArticleStateRepository repository = new HibernateArticleStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ArticleStateQueryRepository articleStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateArticleStateQueryRepository repository = new HibernateArticleStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateArticleEventStore articleEventStore(SessionFactory hibernateSessionFactory) {
        HibernateArticleEventStore eventStore = new HibernateArticleEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractArticleApplicationService.SimpleArticleApplicationService articleApplicationService(
            @Qualifier("articleEventStore") EventStore articleEventStore,
            ArticleStateRepository articleStateRepository,
            ArticleStateQueryRepository articleStateQueryRepository
    ) {
        AbstractArticleApplicationService.SimpleArticleApplicationService applicationService = new AbstractArticleApplicationService.SimpleArticleApplicationService(
                articleEventStore,
                articleStateRepository,
                articleStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public BlogStateRepository blogStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBlogStateRepository repository = new HibernateBlogStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public BlogStateQueryRepository blogStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBlogStateQueryRepository repository = new HibernateBlogStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateBlogEventStore blogEventStore(SessionFactory hibernateSessionFactory) {
        HibernateBlogEventStore eventStore = new HibernateBlogEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractBlogApplicationService.SimpleBlogApplicationService blogApplicationService(
            @Qualifier("blogEventStore") EventStore blogEventStore,
            BlogStateRepository blogStateRepository,
            BlogStateQueryRepository blogStateQueryRepository
    ) {
        AbstractBlogApplicationService.SimpleBlogApplicationService applicationService = new AbstractBlogApplicationService.SimpleBlogApplicationService(
                blogEventStore,
                blogStateRepository,
                blogStateQueryRepository
        );
        return applicationService;
    }


}
