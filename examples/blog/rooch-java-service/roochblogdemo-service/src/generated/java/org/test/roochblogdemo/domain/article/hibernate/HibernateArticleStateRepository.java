// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.domain.article.hibernate;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.roochblogdemo.domain.*;
import org.hibernate.Session;
import org.hibernate.Criteria;
//import org.hibernate.criterion.Order;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.Projections;
import org.hibernate.SessionFactory;
import org.test.roochblogdemo.domain.article.*;
import org.test.roochblogdemo.specialization.*;
import org.test.roochblogdemo.specialization.hibernate.*;
import org.springframework.transaction.annotation.Transactional;

public class HibernateArticleStateRepository implements ArticleStateRepository {
    private SessionFactory sessionFactory;

    public SessionFactory getSessionFactory() { return this.sessionFactory; }

    public void setSessionFactory(SessionFactory sessionFactory) { this.sessionFactory = sessionFactory; }

    protected Session getCurrentSession() {
        return this.sessionFactory.getCurrentSession();
    }
    
    private static final Set<String> readOnlyPropertyPascalCaseNames = new HashSet<String>(Arrays.asList("Id", "Title", "Body", "Comments", "Version", "OffChainVersion", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted"));
    
    private ReadOnlyProxyGenerator readOnlyProxyGenerator;
    
    public ReadOnlyProxyGenerator getReadOnlyProxyGenerator() {
        return readOnlyProxyGenerator;
    }

    public void setReadOnlyProxyGenerator(ReadOnlyProxyGenerator readOnlyProxyGenerator) {
        this.readOnlyProxyGenerator = readOnlyProxyGenerator;
    }

    @Transactional(readOnly = true)
    public ArticleState get(String id, boolean nullAllowed) {
        ArticleState.SqlArticleState state = (ArticleState.SqlArticleState)getCurrentSession().get(AbstractArticleState.SimpleArticleState.class, id);
        if (!nullAllowed && state == null) {
            state = new AbstractArticleState.SimpleArticleState();
            state.setId(id);
        }
        if (getReadOnlyProxyGenerator() != null && state != null) {
            return (ArticleState) getReadOnlyProxyGenerator().createProxy(state, new Class[]{ArticleState.SqlArticleState.class, Saveable.class}, "getStateReadOnly", readOnlyPropertyPascalCaseNames);
        }
        return state;
    }

    public void save(ArticleState state) {
        ArticleState s = state;
        if (getReadOnlyProxyGenerator() != null) {
            s = (ArticleState) getReadOnlyProxyGenerator().getTarget(state);
        }
        if(s.getOffChainVersion() == null) {
            getCurrentSession().save(s);
        } else {
            getCurrentSession().update(s);
        }

        if (s instanceof Saveable)
        {
            Saveable saveable = (Saveable) s;
            saveable.save();
        }
        getCurrentSession().flush();
    }

    public void merge(ArticleState detached) {
        ArticleState persistent = getCurrentSession().get(AbstractArticleState.SimpleArticleState.class, detached.getId());
        if (persistent != null) {
            merge(persistent, detached);
            getCurrentSession().merge(detached);
        } else {
            getCurrentSession().save(detached);
        }
        getCurrentSession().flush();
    }

    private void merge(ArticleState persistent, ArticleState detached) {
        ((ArticleState.MutableArticleState) detached).setOffChainVersion(persistent.getOffChainVersion());
        if (detached.getComments() != null) {
            removeNonExistentComments(persistent.getComments(), detached.getComments());
            for (CommentState d : detached.getComments()) {
                CommentState p = persistent.getComments().get(d.getCommentSeqId());
                if (p == null)
                    getCurrentSession().save(d);
                else
                    merge(p, d);
            }
        }
    }

    private void merge(CommentState persistent, CommentState detached) {
        ((CommentState.MutableCommentState) detached).setOffChainVersion(persistent.getOffChainVersion());
    }

    private void removeNonExistentComments(EntityStateCollection<BigInteger, CommentState> persistentCollection, EntityStateCollection<BigInteger, CommentState> detachedCollection) {
        Set<BigInteger> removedIds = persistentCollection.stream().map(i -> i.getCommentSeqId()).collect(java.util.stream.Collectors.toSet());
        detachedCollection.forEach(i -> removedIds.remove(i.getCommentSeqId()));
        for (BigInteger i : removedIds) {
            CommentState s = persistentCollection.get(i);
            persistentCollection.remove(s);
            getCurrentSession().delete(s);
        }
    }

}

