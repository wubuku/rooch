// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.domain.article;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.specialization.*;
import org.test.roochblogdemo.domain.AbstractEvent;

public abstract class AbstractArticleEvent extends AbstractEvent implements ArticleEvent.SqlArticleEvent, RoochEvent.MutableRoochEvent, HasStatus.MutableHasStatus {
    private ArticleEventId articleEventId = new ArticleEventId();

    public ArticleEventId getArticleEventId() {
        return this.articleEventId;
    }

    public void setArticleEventId(ArticleEventId eventId) {
        this.articleEventId = eventId;
    }
    
    public String getId() {
        return getArticleEventId().getId();
    }

    public void setId(String id) {
        getArticleEventId().setId(id);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getArticleEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getArticleEventId().setVersion(version);
    }

    private RoochEventId roochEventId;

    public RoochEventId getRoochEventId() {
        return this.roochEventId;
    }
    
    public void setRoochEventId(RoochEventId roochEventId) {
        this.roochEventId = roochEventId;
    }

    private String roochSender;

    public String getRoochSender() {
        return this.roochSender;
    }
    
    public void setRoochSender(String roochSender) {
        this.roochSender = roochSender;
    }

    private String roochTxHash;

    public String getRoochTxHash() {
        return this.roochTxHash;
    }
    
    public void setRoochTxHash(String roochTxHash) {
        this.roochTxHash = roochTxHash;
    }

    private String roochTypeTag;

    public String getRoochTypeTag() {
        return this.roochTypeTag;
    }
    
    public void setRoochTypeTag(String roochTypeTag) {
        this.roochTypeTag = roochTypeTag;
    }

    private Long roochTimestampMs;

    public Long getRoochTimestampMs() {
        return this.roochTimestampMs;
    }
    
    public void setRoochTimestampMs(Long roochTimestampMs) {
        this.roochTimestampMs = roochTimestampMs;
    }

    private BigInteger roochBlockHeight;

    public BigInteger getRoochBlockHeight() {
        return this.roochBlockHeight;
    }
    
    public void setRoochBlockHeight(BigInteger roochBlockHeight) {
        this.roochBlockHeight = roochBlockHeight;
    }

    private Long roochEventIndex;

    public Long getRoochEventIndex() {
        return this.roochEventIndex;
    }
    
    public void setRoochEventIndex(Long roochEventIndex) {
        this.roochEventIndex = roochEventIndex;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractArticleEvent() {
    }

    protected AbstractArticleEvent(ArticleEventId eventId) {
        this.articleEventId = eventId;
    }

    protected CommentEventDao getCommentEventDao() {
        return (CommentEventDao)ApplicationContext.current.get("commentEventDao");
    }

    protected CommentEventId newCommentEventId(BigInteger commentSeqId)
    {
        CommentEventId eventId = new CommentEventId(this.getArticleEventId().getId(), 
            commentSeqId, 
            this.getArticleEventId().getVersion());
        return eventId;
    }

    protected void throwOnInconsistentEventIds(CommentEvent.SqlCommentEvent e)
    {
        throwOnInconsistentEventIds(this, e);
    }

    public static void throwOnInconsistentEventIds(ArticleEvent.SqlArticleEvent oe, CommentEvent.SqlCommentEvent e)
    {
        if (!oe.getArticleEventId().getId().equals(e.getCommentEventId().getArticleId()))
        { 
            throw DomainError.named("inconsistentEventIds", "Outer Id Id %1$s but inner id ArticleId %2$s", 
                oe.getArticleEventId().getId(), e.getCommentEventId().getArticleId());
        }
    }


    public abstract String getEventType();

    public static class ArticleClobEvent extends  AbstractArticleEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "ArticleClobEvent";
        }

    }

    public static class CommentUpdated extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "CommentUpdated";
        }

        public BigInteger getCommentSeqId() {
            Object val = getDynamicProperties().get("commentSeqId");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCommentSeqId(BigInteger value) {
            getDynamicProperties().put("commentSeqId", value);
        }

        public String getCommenter() {
            Object val = getDynamicProperties().get("commenter");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setCommenter(String value) {
            getDynamicProperties().put("commenter", value);
        }

        public String getBody() {
            Object val = getDynamicProperties().get("body");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBody(String value) {
            getDynamicProperties().put("body", value);
        }

        public String getOwner() {
            Object val = getDynamicProperties().get("owner");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setOwner(String value) {
            getDynamicProperties().put("owner", value);
        }

    }

    public static class CommentRemoved extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "CommentRemoved";
        }

        public BigInteger getCommentSeqId() {
            Object val = getDynamicProperties().get("commentSeqId");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCommentSeqId(BigInteger value) {
            getDynamicProperties().put("commentSeqId", value);
        }

    }

    public static class CommentAdded extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "CommentAdded";
        }

        public BigInteger getCommentSeqId() {
            Object val = getDynamicProperties().get("commentSeqId");
            if (val instanceof BigInteger) {
                return (BigInteger) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, BigInteger.class);
        }

        public void setCommentSeqId(BigInteger value) {
            getDynamicProperties().put("commentSeqId", value);
        }

        public String getCommenter() {
            Object val = getDynamicProperties().get("commenter");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setCommenter(String value) {
            getDynamicProperties().put("commenter", value);
        }

        public String getBody() {
            Object val = getDynamicProperties().get("body");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBody(String value) {
            getDynamicProperties().put("body", value);
        }

        public String getOwner() {
            Object val = getDynamicProperties().get("owner");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setOwner(String value) {
            getDynamicProperties().put("owner", value);
        }

    }

    public static class ArticleCreated extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "ArticleCreated";
        }

        public String getTitle() {
            Object val = getDynamicProperties().get("title");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTitle(String value) {
            getDynamicProperties().put("title", value);
        }

        public String getBody() {
            Object val = getDynamicProperties().get("body");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBody(String value) {
            getDynamicProperties().put("body", value);
        }

    }

    public static class ArticleUpdated extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "ArticleUpdated";
        }

        public String getTitle() {
            Object val = getDynamicProperties().get("title");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setTitle(String value) {
            getDynamicProperties().put("title", value);
        }

        public String getBody() {
            Object val = getDynamicProperties().get("body");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setBody(String value) {
            getDynamicProperties().put("body", value);
        }

    }

    public static class ArticleDeleted extends ArticleClobEvent {

        @Override
        public String getEventType() {
            return "ArticleDeleted";
        }

    }


}

