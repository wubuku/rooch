// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.domain;

import org.test.roochblogdemo.specialization.ReflectUtils;
import org.test.roochblogdemo.specialization.MutationContext;
import org.test.roochblogdemo.specialization.VerificationContext;
import org.test.roochblogdemo.domain.article.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.domain.blog.*;

public class StaticMethodConstraints {

    public static void assertStaticVerificationAndMutationMethods() {

        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.UpdateCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "commentSeqId", "commenter", "body", "owner"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.RemoveCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, VerificationContext.class},
                    new String[]{"_", "commentSeqId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.AddCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "commenter", "body"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.CreateLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "title", "body"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.UpdateLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new String[]{"_", "title", "body"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.DeleteLogic",
                    "verify",
                    new Class[]{ArticleState.class, VerificationContext.class},
                    new String[]{"_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.AddArticleLogic",
                    "verify",
                    new Class[]{BlogState.class, String.class, VerificationContext.class},
                    new String[]{"_", "articleId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.RemoveArticleLogic",
                    "verify",
                    new Class[]{BlogState.class, String.class, VerificationContext.class},
                    new String[]{"_", "articleId"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.CreateLogic",
                    "verify",
                    new Class[]{BlogState.class, String.class, String[].class, VerificationContext.class},
                    new String[]{"_", "name", "articles"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.UpdateLogic",
                    "verify",
                    new Class[]{BlogState.class, String.class, String[].class, VerificationContext.class},
                    new String[]{"_", "name", "articles"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.DeleteLogic",
                    "verify",
                    new Class[]{BlogState.class, VerificationContext.class},
                    new String[]{"_"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.UpdateCommentLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "commentSeqId", "commenter", "body", "owner", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.RemoveCommentLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "commentSeqId", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.AddCommentLogic",
                    "mutate",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "commentSeqId", "commenter", "body", "owner", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.CreateLogic",
                    "mutate",
                    new Class[]{ArticleState.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "title", "body", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.UpdateLogic",
                    "mutate",
                    new Class[]{ArticleState.class, String.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "title", "body", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.article.DeleteLogic",
                    "mutate",
                    new Class[]{ArticleState.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.AddArticleLogic",
                    "mutate",
                    new Class[]{BlogState.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "articleId", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.RemoveArticleLogic",
                    "mutate",
                    new Class[]{BlogState.class, String.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "articleId", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.CreateLogic",
                    "mutate",
                    new Class[]{BlogState.class, String.class, String[].class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "articles", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.UpdateLogic",
                    "mutate",
                    new Class[]{BlogState.class, String.class, String[].class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "name", "articles", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );


        ReflectUtils.assertStaticMethodIfClassExists(
                    "org.test.roochblogdemo.domain.blog.DeleteLogic",
                    "mutate",
                    new Class[]{BlogState.class, RoochEventId.class, String.class, String.class, String.class, Long.class, BigInteger.class, Long.class, String.class, MutationContext.class},
                    new String[]{"_", "roochEventId", "roochSender", "roochTxHash", "roochTypeTag", "roochTimestampMs", "roochBlockHeight", "roochEventIndex", "status"}
            );



    }

}


