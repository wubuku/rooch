// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.domain.blog;

import java.util.*;
import java.util.Date;
import java.math.BigInteger;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.specialization.*;
import org.test.roochblogdemo.domain.AbstractEvent;

public abstract class AbstractBlogEvent extends AbstractEvent implements BlogEvent.SqlBlogEvent, RoochEvent.MutableRoochEvent, HasStatus.MutableHasStatus {
    private BlogEventId blogEventId = new BlogEventId();

    public BlogEventId getBlogEventId() {
        return this.blogEventId;
    }

    public void setBlogEventId(BlogEventId eventId) {
        this.blogEventId = eventId;
    }
    
    public String getAccountAddress() {
        return getBlogEventId().getAccountAddress();
    }

    public void setAccountAddress(String accountAddress) {
        getBlogEventId().setAccountAddress(accountAddress);
    }

    private boolean eventReadOnly;

    public boolean getEventReadOnly() { return this.eventReadOnly; }

    public void setEventReadOnly(boolean readOnly) { this.eventReadOnly = readOnly; }

    public BigInteger getVersion() {
        return getBlogEventId().getVersion();
    }
    
    public void setVersion(BigInteger version) {
        getBlogEventId().setVersion(version);
    }

    private RoochEventId roochEventId;

    public RoochEventId getRoochEventId() {
        return this.roochEventId;
    }
    
    public void setRoochEventId(RoochEventId roochEventId) {
        this.roochEventId = roochEventId;
    }

    private String roochSender;

    public String getRoochSender() {
        return this.roochSender;
    }
    
    public void setRoochSender(String roochSender) {
        this.roochSender = roochSender;
    }

    private String roochTxHash;

    public String getRoochTxHash() {
        return this.roochTxHash;
    }
    
    public void setRoochTxHash(String roochTxHash) {
        this.roochTxHash = roochTxHash;
    }

    private String roochTypeTag;

    public String getRoochTypeTag() {
        return this.roochTypeTag;
    }
    
    public void setRoochTypeTag(String roochTypeTag) {
        this.roochTypeTag = roochTypeTag;
    }

    private Long roochTimestampMs;

    public Long getRoochTimestampMs() {
        return this.roochTimestampMs;
    }
    
    public void setRoochTimestampMs(Long roochTimestampMs) {
        this.roochTimestampMs = roochTimestampMs;
    }

    private BigInteger roochBlockHeight;

    public BigInteger getRoochBlockHeight() {
        return this.roochBlockHeight;
    }
    
    public void setRoochBlockHeight(BigInteger roochBlockHeight) {
        this.roochBlockHeight = roochBlockHeight;
    }

    private Long roochEventIndex;

    public Long getRoochEventIndex() {
        return this.roochEventIndex;
    }
    
    public void setRoochEventIndex(Long roochEventIndex) {
        this.roochEventIndex = roochEventIndex;
    }

    private String status;

    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }

    private String createdBy;

    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    private Date createdAt;

    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }


    private String commandId;

    public String getCommandId() {
        return commandId;
    }

    public void setCommandId(String commandId) {
        this.commandId = commandId;
    }

    private String commandType;

    public String getCommandType() {
        return commandType;
    }

    public void setCommandType(String commandType) {
        this.commandType = commandType;
    }

    protected AbstractBlogEvent() {
    }

    protected AbstractBlogEvent(BlogEventId eventId) {
        this.blogEventId = eventId;
    }


    public abstract String getEventType();

    public static class BlogClobEvent extends  AbstractBlogEvent {

        protected Map<String, Object> getDynamicProperties() {
            return dynamicProperties;
        }

        protected void setDynamicProperties(Map<String, Object> dynamicProperties) {
            if (dynamicProperties == null) {
                throw new IllegalArgumentException("dynamicProperties is null.");
            }
            this.dynamicProperties = dynamicProperties;
        }

        private Map<String, Object> dynamicProperties = new HashMap<>();

        protected String getDynamicPropertiesLob() {
            return ApplicationContext.current.getClobConverter().toString(getDynamicProperties());
        }

        protected void setDynamicPropertiesLob(String text) {
            getDynamicProperties().clear();
            Map<String, Object> ps = ApplicationContext.current.getClobConverter().parseLobProperties(text);
            if (ps != null) {
                for (Map.Entry<String, Object> kv : ps.entrySet()) {
                    getDynamicProperties().put(kv.getKey(), kv.getValue());
                }
            }
        }

        @Override
        public String getEventType() {
            return "BlogClobEvent";
        }

    }

    public static class ArticleAddedToBlog extends BlogClobEvent {

        @Override
        public String getEventType() {
            return "ArticleAddedToBlog";
        }

        public String getArticleId() {
            Object val = getDynamicProperties().get("articleId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setArticleId(String value) {
            getDynamicProperties().put("articleId", value);
        }

    }

    public static class ArticleRemovedFromBlog extends BlogClobEvent {

        @Override
        public String getEventType() {
            return "ArticleRemovedFromBlog";
        }

        public String getArticleId() {
            Object val = getDynamicProperties().get("articleId");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setArticleId(String value) {
            getDynamicProperties().put("articleId", value);
        }

    }

    public static class BlogCreated extends BlogClobEvent {

        @Override
        public String getEventType() {
            return "BlogCreated";
        }

        public String getName() {
            Object val = getDynamicProperties().get("name");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setName(String value) {
            getDynamicProperties().put("name", value);
        }

        public String[] getArticles() {
            Object val = getDynamicProperties().get("articles");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setArticles(String[] value) {
            getDynamicProperties().put("articles", value);
        }

    }

    public static class BlogUpdated extends BlogClobEvent {

        @Override
        public String getEventType() {
            return "BlogUpdated";
        }

        public String getName() {
            Object val = getDynamicProperties().get("name");
            if (val instanceof String) {
                return (String) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String.class);
        }

        public void setName(String value) {
            getDynamicProperties().put("name", value);
        }

        public String[] getArticles() {
            Object val = getDynamicProperties().get("articles");
            if (val instanceof String[]) {
                return (String[]) val;
            }
            return ApplicationContext.current.getTypeConverter().convertValue(val, String[].class);
        }

        public void setArticles(String[] value) {
            getDynamicProperties().put("articles", value);
        }

    }

    public static class BlogDeleted extends BlogClobEvent {

        @Override
        public String getEventType() {
            return "BlogDeleted";
        }

    }


}

