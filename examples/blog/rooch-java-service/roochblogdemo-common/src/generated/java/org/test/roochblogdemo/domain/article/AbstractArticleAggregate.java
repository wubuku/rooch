// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.domain.article;

import java.util.*;
import java.math.BigInteger;
import java.util.Date;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.specialization.*;

public abstract class AbstractArticleAggregate extends AbstractAggregate implements ArticleAggregate {
    private ArticleState.MutableArticleState state;

    private List<Event> changes = new ArrayList<Event>();

    public AbstractArticleAggregate(ArticleState state) {
        this.state = (ArticleState.MutableArticleState)state;
    }

    public ArticleState getState() {
        return this.state;
    }

    public List<Event> getChanges() {
        return this.changes;
    }

    public void throwOnInvalidStateTransition(Command c) {
        ArticleCommand.throwOnInvalidStateTransition(this.state, c);
    }

    protected void apply(Event e) {
        onApplying(e);
        state.mutate(e);
        changes.add(e);
    }


    ////////////////////////

    public static class SimpleArticleAggregate extends AbstractArticleAggregate {
        public SimpleArticleAggregate(ArticleState state) {
            super(state);
        }

        @Override
        public void updateComment(BigInteger commentSeqId, String commenter, String body, String owner, Long offChainVersion, String commandId, String requesterId, ArticleCommands.UpdateComment c) {
            try {
                verifyUpdateComment(commentSeqId, commenter, body, owner, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newCommentUpdated(commentSeqId, commenter, body, owner, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void removeComment(BigInteger commentSeqId, Long offChainVersion, String commandId, String requesterId, ArticleCommands.RemoveComment c) {
            try {
                verifyRemoveComment(commentSeqId, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newCommentRemoved(commentSeqId, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void addComment(String commenter, String body, Long offChainVersion, String commandId, String requesterId, ArticleCommands.AddComment c) {
            try {
                verifyAddComment(commenter, body, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newCommentAdded(commenter, body, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void create(String title, String body, Long offChainVersion, String commandId, String requesterId, ArticleCommands.Create c) {
            try {
                verifyCreate(title, body, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newArticleCreated(title, body, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void update(String title, String body, Long offChainVersion, String commandId, String requesterId, ArticleCommands.Update c) {
            try {
                verifyUpdate(title, body, c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newArticleUpdated(title, body, offChainVersion, commandId, requesterId);
            apply(e);
        }

        @Override
        public void delete(Long offChainVersion, String commandId, String requesterId, ArticleCommands.Delete c) {
            try {
                verifyDelete(c);
            } catch (Exception ex) {
                throw new DomainError("VerificationFailed", ex);
            }

            Event e = newArticleDeleted(offChainVersion, commandId, requesterId);
            apply(e);
        }

        protected void verifyUpdateComment(BigInteger commentSeqId, String commenter, String body, String owner, ArticleCommands.UpdateComment c) {
            BigInteger CommentSeqId = commentSeqId;
            String Commenter = commenter;
            String Body = body;
            String Owner = owner;

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.UpdateCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, String.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), commentSeqId, commenter, body, owner, VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class UpdateCommentLogic {
//    public static void verify(ArticleState articleState, BigInteger commentSeqId, String commenter, String body, String owner, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyRemoveComment(BigInteger commentSeqId, ArticleCommands.RemoveComment c) {
            BigInteger CommentSeqId = commentSeqId;

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.RemoveCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, BigInteger.class, VerificationContext.class},
                    new Object[]{getState(), commentSeqId, VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class RemoveCommentLogic {
//    public static void verify(ArticleState articleState, BigInteger commentSeqId, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyAddComment(String commenter, String body, ArticleCommands.AddComment c) {
            String Commenter = commenter;
            String Body = body;

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.AddCommentLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), commenter, body, VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class AddCommentLogic {
//    public static void verify(ArticleState articleState, String commenter, String body, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyCreate(String title, String body, ArticleCommands.Create c) {
            String Title = title;
            String Body = body;

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.CreateLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), title, body, VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class CreateLogic {
//    public static void verify(ArticleState articleState, String title, String body, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyUpdate(String title, String body, ArticleCommands.Update c) {
            String Title = title;
            String Body = body;

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.UpdateLogic",
                    "verify",
                    new Class[]{ArticleState.class, String.class, String.class, VerificationContext.class},
                    new Object[]{getState(), title, body, VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class UpdateLogic {
//    public static void verify(ArticleState articleState, String title, String body, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected void verifyDelete(ArticleCommands.Delete c) {

            ReflectUtils.invokeStaticMethod(
                    "org.test.roochblogdemo.domain.article.DeleteLogic",
                    "verify",
                    new Class[]{ArticleState.class, VerificationContext.class},
                    new Object[]{getState(), VerificationContext.forCommand(c)}
            );

//package org.test.roochblogdemo.domain.article;
//
//public class DeleteLogic {
//    public static void verify(ArticleState articleState, VerificationContext verificationContext) {
//    }
//}

        }
           

        protected AbstractArticleEvent.CommentUpdated newCommentUpdated(BigInteger commentSeqId, String commenter, String body, String owner, Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.CommentUpdated e = new AbstractArticleEvent.CommentUpdated();

            e.setCommentSeqId(commentSeqId);
            e.setCommenter(commenter);
            e.setBody(body);
            e.setOwner(owner);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

        protected AbstractArticleEvent.CommentRemoved newCommentRemoved(BigInteger commentSeqId, Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.CommentRemoved e = new AbstractArticleEvent.CommentRemoved();

            e.setCommentSeqId(commentSeqId);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

        protected AbstractArticleEvent.CommentAdded newCommentAdded(String commenter, String body, Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.CommentAdded e = new AbstractArticleEvent.CommentAdded();

            e.setCommentSeqId(null); // todo Need to update 'verify' method to return event properties.
            e.setCommenter(commenter);
            e.setBody(body);
            e.setOwner(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

        protected AbstractArticleEvent.ArticleCreated newArticleCreated(String title, String body, Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.ArticleCreated e = new AbstractArticleEvent.ArticleCreated();

            e.setTitle(title);
            e.setBody(body);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

        protected AbstractArticleEvent.ArticleUpdated newArticleUpdated(String title, String body, Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.ArticleUpdated e = new AbstractArticleEvent.ArticleUpdated();

            e.setTitle(title);
            e.setBody(body);
            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

        protected AbstractArticleEvent.ArticleDeleted newArticleDeleted(Long offChainVersion, String commandId, String requesterId) {
            ArticleEventId eventId = new ArticleEventId(getState().getId(), null);
            AbstractArticleEvent.ArticleDeleted e = new AbstractArticleEvent.ArticleDeleted();

            e.setRoochEventId(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochSender(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTxHash(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTypeTag(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochTimestampMs(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochBlockHeight(null); // todo Need to update 'verify' method to return event properties.
            e.setRoochEventIndex(null); // todo Need to update 'verify' method to return event properties.
            e.setStatus(null); // todo Need to update 'verify' method to return event properties.

            e.setCommandId(commandId);
            e.setCreatedBy(requesterId);
            e.setCreatedAt((java.util.Date)ApplicationContext.current.getTimestampService().now(java.util.Date.class));

            e.setArticleEventId(eventId);
            return e;
        }

    }

}

