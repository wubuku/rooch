// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.rooch.contract.service;

import com.github.wubuku.rooch.bean.GetAnnotatedStatesResponseMoveStructItem;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;
import org.test.roochblogdemo.domain.article.*;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.rooch.contract.ContractConstants;
import org.test.roochblogdemo.rooch.contract.DomainBeanUtils;
import org.test.roochblogdemo.rooch.bcs.BcsDomainBeanUtils;
import org.test.roochblogdemo.rooch.contract.Article;
import org.test.roochblogdemo.rooch.contract.Comment;

import java.util.*;
import java.math.*;
import java.util.function.*;

public class RoochArticleStateRetriever {

    private RoochJsonRpcClient roochJsonRpcClient;

    private Function<String, ArticleState.MutableArticleState> articleStateFactory;

    private BiFunction<ArticleState, BigInteger, CommentState.MutableCommentState> commentStateFactory;

    private CommentCommentSeqIdsGetter commentCommentSeqIdsGetter;


    public RoochArticleStateRetriever(RoochJsonRpcClient roochJsonRpcClient,
                                    Function<String, ArticleState.MutableArticleState> articleStateFactory,
                                    BiFunction<ArticleState, BigInteger, CommentState.MutableCommentState> commentStateFactory,
                                    CommentCommentSeqIdsGetter commentCommentSeqIdsGetter
    ) {
        this.roochJsonRpcClient = roochJsonRpcClient;
        this.articleStateFactory = articleStateFactory;
        this.commentStateFactory = commentStateFactory;
        this.commentCommentSeqIdsGetter = commentCommentSeqIdsGetter;
    }

    public ArticleState retrieveArticleState(String objectId) {
        List<GetAnnotatedStatesResponseMoveStructItem<Article.MoveObject>> getObjectListResponse = roochJsonRpcClient.getMoveStructAnnotatedStates(
                "/object/" + com.github.wubuku.rooch.utils.HexUtils.formatHex(objectId),
                Article.MoveObject.class
        );
        if (getObjectListResponse.size() == 0 || getObjectListResponse.get(0) == null) {
            return null;
        }
        Article.MoveObject article = getObjectListResponse.get(0).getMoveValue().getValue();
        return toArticleState(article);
    }

    private ArticleState toArticleState(Article.MoveObject articleObj) {
        Article article = articleObj.getValue().getValue();
        ArticleState.MutableArticleState articleState = articleStateFactory.apply(articleObj.getId());
        articleState.setVersion(article.getVersion());
        articleState.setTitle(article.getTitle());
        articleState.setBody(article.getBody());
        if (article.getComments() != null) {
            String commentTableHandle = article.getComments().getValue().getHandle();
            List<Comment> comments = getComments(commentTableHandle, commentCommentSeqIdsGetter.getCommentCommentSeqIds(articleState.getId()));
            for (Comment i : comments) {
                articleState.getComments().add(toCommentState(articleState, i));
            }
        }

        return articleState;
    }

    private CommentState toCommentState(ArticleState articleState, Comment comment) {
        CommentState.MutableCommentState commentState = commentStateFactory.apply(articleState, comment.getCommentSeqId());
        commentState.setCommenter(comment.getCommenter());
        commentState.setBody(comment.getBody());
        commentState.setOwner(comment.getOwner());
        return commentState;
    }

    private List<Comment> getComments(String commentTableHandle, List<BigInteger> commentSeqIds) {
        List<Comment> comments = new ArrayList<>();

        for (BigInteger commentSeqId : commentSeqIds) {
            String key = com.github.wubuku.rooch.utils.HexUtils.byteArrayToHexWithPrefix(com.github.wubuku.rooch.bcs.BcsUtils.serializeU64(commentSeqId.longValue()));
            List<GetAnnotatedStatesResponseMoveStructItem<Comment>> getCommentTableItemResponse = roochJsonRpcClient
                    .getMoveStructAnnotatedStates("/table/" + com.github.wubuku.rooch.utils.HexUtils.formatHex(commentTableHandle) + "/" + key, Comment.class);
            if (getCommentTableItemResponse.size() == 1 && getCommentTableItemResponse.get(0) != null) {
                comments.add(getCommentTableItemResponse.get(0).getMoveValue().getValue());
            }
        }
        return comments;
    }

    public interface CommentCommentSeqIdsGetter {
        List<BigInteger> getCommentCommentSeqIds(String articleId);
    }

}

