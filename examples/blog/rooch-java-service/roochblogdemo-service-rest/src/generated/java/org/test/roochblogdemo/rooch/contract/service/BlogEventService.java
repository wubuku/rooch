// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;
import com.github.wubuku.rooch.bean.EventPageView;
import com.github.wubuku.rooch.bean.PageView;

import org.test.roochblogdemo.domain.blog.AbstractBlogEvent;
import org.test.roochblogdemo.rooch.contract.ContractConstants;
import org.test.roochblogdemo.rooch.contract.DomainBeanUtils;
import org.test.roochblogdemo.rooch.contract.blog.ArticleAddedToBlog;
import org.test.roochblogdemo.rooch.contract.blog.ArticleRemovedFromBlog;
import org.test.roochblogdemo.rooch.contract.blog.BlogCreated;
import org.test.roochblogdemo.rooch.contract.blog.BlogUpdated;
import org.test.roochblogdemo.rooch.contract.blog.BlogDeleted;
import org.test.roochblogdemo.rooch.contract.repository.BlogEventRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class BlogEventService {
    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("BlogDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private BlogEventRepository blogEventRepository;


    @Transactional
    public void updateStatusToProcessed(AbstractBlogEvent event) {
        event.setStatus("D");
        blogEventRepository.save(event);
    }

    @Transactional
    public void pullArticleAddedToBlogEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.BLOG_MODULE_ARTICLE_ADDED_TO_BLOG;
        BigInteger cursor = getArticleAddedToBlogEventNextCursor();
        while (true) {
            EventPageView<ArticleAddedToBlog> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleAddedToBlog.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<ArticleAddedToBlog> eventEnvelope : eventPage.getData()) {
                    saveArticleAddedToBlog(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getArticleAddedToBlogEventNextCursor() {
        AbstractBlogEvent.ArticleAddedToBlog lastEvent = blogEventRepository.findFirstArticleAddedToBlogByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleAddedToBlog(AnnotatedEventView<ArticleAddedToBlog> eventEnvelope) {
        eventEnvelope.getParsedEventData().getValue().setAccountAddress(contractAddress);
        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = DomainBeanUtils.toArticleAddedToBlog(eventEnvelope);
        if (blogEventRepository.findById(articleAddedToBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleAddedToBlog);
    }

    @Transactional
    public void pullArticleRemovedFromBlogEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.BLOG_MODULE_ARTICLE_REMOVED_FROM_BLOG;
        BigInteger cursor = getArticleRemovedFromBlogEventNextCursor();
        while (true) {
            EventPageView<ArticleRemovedFromBlog> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleRemovedFromBlog.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<ArticleRemovedFromBlog> eventEnvelope : eventPage.getData()) {
                    saveArticleRemovedFromBlog(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getArticleRemovedFromBlogEventNextCursor() {
        AbstractBlogEvent.ArticleRemovedFromBlog lastEvent = blogEventRepository.findFirstArticleRemovedFromBlogByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleRemovedFromBlog(AnnotatedEventView<ArticleRemovedFromBlog> eventEnvelope) {
        eventEnvelope.getParsedEventData().getValue().setAccountAddress(contractAddress);
        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = DomainBeanUtils.toArticleRemovedFromBlog(eventEnvelope);
        if (blogEventRepository.findById(articleRemovedFromBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleRemovedFromBlog);
    }

    @Transactional
    public void pullBlogCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.BLOG_MODULE_BLOG_CREATED;
        BigInteger cursor = getBlogCreatedEventNextCursor();
        while (true) {
            EventPageView<BlogCreated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, BlogCreated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<BlogCreated> eventEnvelope : eventPage.getData()) {
                    saveBlogCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getBlogCreatedEventNextCursor() {
        AbstractBlogEvent.BlogCreated lastEvent = blogEventRepository.findFirstBlogCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveBlogCreated(AnnotatedEventView<BlogCreated> eventEnvelope) {
        eventEnvelope.getParsedEventData().getValue().setAccountAddress(contractAddress);
        AbstractBlogEvent.BlogCreated blogCreated = DomainBeanUtils.toBlogCreated(eventEnvelope);
        if (blogEventRepository.findById(blogCreated.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(blogCreated);
    }

    @Transactional
    public void pullBlogUpdatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.BLOG_MODULE_BLOG_UPDATED;
        BigInteger cursor = getBlogUpdatedEventNextCursor();
        while (true) {
            EventPageView<BlogUpdated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, BlogUpdated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<BlogUpdated> eventEnvelope : eventPage.getData()) {
                    saveBlogUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getBlogUpdatedEventNextCursor() {
        AbstractBlogEvent.BlogUpdated lastEvent = blogEventRepository.findFirstBlogUpdatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveBlogUpdated(AnnotatedEventView<BlogUpdated> eventEnvelope) {
        eventEnvelope.getParsedEventData().getValue().setAccountAddress(contractAddress);
        AbstractBlogEvent.BlogUpdated blogUpdated = DomainBeanUtils.toBlogUpdated(eventEnvelope);
        if (blogEventRepository.findById(blogUpdated.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(blogUpdated);
    }

    @Transactional
    public void pullBlogDeletedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.BLOG_MODULE_BLOG_DELETED;
        BigInteger cursor = getBlogDeletedEventNextCursor();
        while (true) {
            EventPageView<BlogDeleted> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, BlogDeleted.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<BlogDeleted> eventEnvelope : eventPage.getData()) {
                    saveBlogDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getBlogDeletedEventNextCursor() {
        AbstractBlogEvent.BlogDeleted lastEvent = blogEventRepository.findFirstBlogDeletedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveBlogDeleted(AnnotatedEventView<BlogDeleted> eventEnvelope) {
        eventEnvelope.getParsedEventData().getValue().setAccountAddress(contractAddress);
        AbstractBlogEvent.BlogDeleted blogDeleted = DomainBeanUtils.toBlogDeleted(eventEnvelope);
        if (blogEventRepository.findById(blogDeleted.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(blogDeleted);
    }

}
