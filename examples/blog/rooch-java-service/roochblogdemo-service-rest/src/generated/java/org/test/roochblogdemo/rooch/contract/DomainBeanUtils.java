// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.rooch.contract;

import java.math.*;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.bean.AnnotatedMoveOptionView;
import com.github.wubuku.rooch.bean.EventID;
import org.test.roochblogdemo.domain.RoochEvent;
import org.test.roochblogdemo.domain.RoochEventId;
import org.test.roochblogdemo.domain.article.AbstractArticleEvent;
import org.test.roochblogdemo.rooch.contract.article.CommentUpdated;
import org.test.roochblogdemo.rooch.contract.article.CommentRemoved;
import org.test.roochblogdemo.rooch.contract.article.CommentAdded;
import org.test.roochblogdemo.rooch.contract.article.ArticleCreated;
import org.test.roochblogdemo.rooch.contract.article.ArticleUpdated;
import org.test.roochblogdemo.rooch.contract.article.ArticleDeleted;
import org.test.roochblogdemo.domain.blog.AbstractBlogEvent;
import org.test.roochblogdemo.rooch.contract.blog.ArticleAddedToBlog;
import org.test.roochblogdemo.rooch.contract.blog.ArticleRemovedFromBlog;
import org.test.roochblogdemo.rooch.contract.blog.BlogCreated;
import org.test.roochblogdemo.rooch.contract.blog.BlogUpdated;
import org.test.roochblogdemo.rooch.contract.blog.BlogDeleted;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }


    public static AbstractArticleEvent.CommentUpdated toCommentUpdated(AnnotatedEventView<CommentUpdated> eventEnvelope) {
        CommentUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.CommentUpdated commentUpdated = new AbstractArticleEvent.CommentUpdated();
        commentUpdated.setId(contractEvent.getId());
        commentUpdated.setCommentSeqId(contractEvent.getCommentSeqId());
        commentUpdated.setCommenter(contractEvent.getCommenter());
        commentUpdated.setBody(contractEvent.getBody());
        commentUpdated.setOwner(contractEvent.getOwner());
        commentUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(commentUpdated, eventEnvelope);

        return commentUpdated;
    }

    public static AbstractArticleEvent.CommentRemoved toCommentRemoved(AnnotatedEventView<CommentRemoved> eventEnvelope) {
        CommentRemoved contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.CommentRemoved commentRemoved = new AbstractArticleEvent.CommentRemoved();
        commentRemoved.setId(contractEvent.getId());
        commentRemoved.setCommentSeqId(contractEvent.getCommentSeqId());
        commentRemoved.setVersion(contractEvent.getVersion());

        setRoochEventProperties(commentRemoved, eventEnvelope);

        return commentRemoved;
    }

    public static AbstractArticleEvent.CommentAdded toCommentAdded(AnnotatedEventView<CommentAdded> eventEnvelope) {
        CommentAdded contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.CommentAdded commentAdded = new AbstractArticleEvent.CommentAdded();
        commentAdded.setId(contractEvent.getId());
        commentAdded.setCommentSeqId(contractEvent.getCommentSeqId());
        commentAdded.setCommenter(contractEvent.getCommenter());
        commentAdded.setBody(contractEvent.getBody());
        commentAdded.setOwner(contractEvent.getOwner());
        commentAdded.setVersion(contractEvent.getVersion());

        setRoochEventProperties(commentAdded, eventEnvelope);

        return commentAdded;
    }

    public static AbstractArticleEvent.ArticleCreated toArticleCreated(AnnotatedEventView<ArticleCreated> eventEnvelope) {
        ArticleCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ArticleCreated articleCreated = new AbstractArticleEvent.ArticleCreated();
        articleCreated.setId(contractEvent.getId().getValue().getVec()[0]);
        articleCreated.setTitle(contractEvent.getTitle());
        articleCreated.setBody(contractEvent.getBody());
        articleCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(articleCreated, eventEnvelope);

        return articleCreated;
    }

    public static AbstractArticleEvent.ArticleUpdated toArticleUpdated(AnnotatedEventView<ArticleUpdated> eventEnvelope) {
        ArticleUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ArticleUpdated articleUpdated = new AbstractArticleEvent.ArticleUpdated();
        articleUpdated.setId(contractEvent.getId());
        articleUpdated.setTitle(contractEvent.getTitle());
        articleUpdated.setBody(contractEvent.getBody());
        articleUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(articleUpdated, eventEnvelope);

        return articleUpdated;
    }

    public static AbstractArticleEvent.ArticleDeleted toArticleDeleted(AnnotatedEventView<ArticleDeleted> eventEnvelope) {
        ArticleDeleted contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractArticleEvent.ArticleDeleted articleDeleted = new AbstractArticleEvent.ArticleDeleted();
        articleDeleted.setId(contractEvent.getId());
        articleDeleted.setVersion(contractEvent.getVersion());

        setRoochEventProperties(articleDeleted, eventEnvelope);

        return articleDeleted;
    }

    public static AbstractBlogEvent.ArticleAddedToBlog toArticleAddedToBlog(AnnotatedEventView<ArticleAddedToBlog> eventEnvelope) {
        ArticleAddedToBlog contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = new AbstractBlogEvent.ArticleAddedToBlog();
        articleAddedToBlog.setAccountAddress(contractEvent.getAccountAddress());
        articleAddedToBlog.setArticleId(contractEvent.getArticleId());
        articleAddedToBlog.setVersion(contractEvent.getVersion());

        setRoochEventProperties(articleAddedToBlog, eventEnvelope);

        return articleAddedToBlog;
    }

    public static AbstractBlogEvent.ArticleRemovedFromBlog toArticleRemovedFromBlog(AnnotatedEventView<ArticleRemovedFromBlog> eventEnvelope) {
        ArticleRemovedFromBlog contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = new AbstractBlogEvent.ArticleRemovedFromBlog();
        articleRemovedFromBlog.setAccountAddress(contractEvent.getAccountAddress());
        articleRemovedFromBlog.setArticleId(contractEvent.getArticleId());
        articleRemovedFromBlog.setVersion(contractEvent.getVersion());

        setRoochEventProperties(articleRemovedFromBlog, eventEnvelope);

        return articleRemovedFromBlog;
    }

    public static AbstractBlogEvent.BlogCreated toBlogCreated(AnnotatedEventView<BlogCreated> eventEnvelope) {
        BlogCreated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractBlogEvent.BlogCreated blogCreated = new AbstractBlogEvent.BlogCreated();
        blogCreated.setAccountAddress(contractEvent.getAccountAddress());
        blogCreated.setName(contractEvent.getName());
        blogCreated.setArticles(contractEvent.getArticles());
        blogCreated.setVersion(BigInteger.valueOf(-1));

        setRoochEventProperties(blogCreated, eventEnvelope);

        return blogCreated;
    }

    public static AbstractBlogEvent.BlogUpdated toBlogUpdated(AnnotatedEventView<BlogUpdated> eventEnvelope) {
        BlogUpdated contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractBlogEvent.BlogUpdated blogUpdated = new AbstractBlogEvent.BlogUpdated();
        blogUpdated.setAccountAddress(contractEvent.getAccountAddress());
        blogUpdated.setName(contractEvent.getName());
        blogUpdated.setArticles(contractEvent.getArticles());
        blogUpdated.setVersion(contractEvent.getVersion());

        setRoochEventProperties(blogUpdated, eventEnvelope);

        return blogUpdated;
    }

    public static AbstractBlogEvent.BlogDeleted toBlogDeleted(AnnotatedEventView<BlogDeleted> eventEnvelope) {
        BlogDeleted contractEvent = eventEnvelope.getParsedEventData().getValue();

        AbstractBlogEvent.BlogDeleted blogDeleted = new AbstractBlogEvent.BlogDeleted();
        blogDeleted.setAccountAddress(contractEvent.getAccountAddress());
        blogDeleted.setVersion(contractEvent.getVersion());

        setRoochEventProperties(blogDeleted, eventEnvelope);

        return blogDeleted;
    }

    public static org.test.roochblogdemo.rooch.contract.persistence.CommentTableItemAdded toPersistenceCommentTableItemAdded(AnnotatedEventView<CommentTableItemAdded> eventEnvelope) {
        CommentTableItemAdded contractEvent = eventEnvelope.getParsedEventData().getValue();
        org.test.roochblogdemo.domain.article.ArticleCommentId id = new org.test.roochblogdemo.domain.article.ArticleCommentId(contractEvent.getArticleId(), contractEvent.getCommentSeqId());
        org.test.roochblogdemo.rooch.contract.persistence.CommentTableItemAdded e = new org.test.roochblogdemo.rooch.contract.persistence.CommentTableItemAdded();
        e.setArticleCommentId(id);
        setRoochEventProperties(e, eventEnvelope);
        return e;
    }

    public static void setRoochEventProperties(RoochEvent.MutableRoochEvent domainRoochEvent, AnnotatedEventView<?> eventEnvelope) {
        domainRoochEvent.setRoochEventId(toRoochEventId(eventEnvelope.getEvent().getEventId()));
        domainRoochEvent.setRoochTypeTag(eventEnvelope.getEvent().getTypeTag());
        domainRoochEvent.setRoochEventIndex(eventEnvelope.getEvent().getEventIndex());
        domainRoochEvent.setRoochTxHash(eventEnvelope.getTxHash());
        domainRoochEvent.setRoochSender(eventEnvelope.getSender());
        domainRoochEvent.setRoochTimestampMs(eventEnvelope.getTimestampMs());
    }

    public static RoochEventId toRoochEventId(EventID eventId) {
        return new RoochEventId(eventId.getEventHandleId(), eventId.getEventSeq());
    }

    private static <T> T extractOptionalValue(AnnotatedMoveOptionView<T> optionView) {
        return optionView == null ? null
                : (optionView.getValue().getVec() == null || optionView.getValue().getVec().length == 0) ? null
                : optionView.getValue().getVec()[0];
    }
}
