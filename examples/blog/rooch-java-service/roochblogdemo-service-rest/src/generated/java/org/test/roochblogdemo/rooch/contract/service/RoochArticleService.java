// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.rooch.contract.service;

import com.github.wubuku.rooch.utils.RoochJsonRpcClient;
import org.test.roochblogdemo.domain.*;
import org.test.roochblogdemo.domain.article.*;
import org.test.roochblogdemo.rooch.contract.repository.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.stream.*;
import java.util.*;
import java.math.*;

@Service
public class RoochArticleService {

    @Autowired
    private ArticleStateRepository articleStateRepository;

    @Autowired
    private CommentTableItemAddedRepository commentTableItemAddedRepository;
    @Autowired
    private ArticleEventService articleEventService;

    private RoochArticleStateRetriever roochArticleStateRetriever;

    @Autowired
    public RoochArticleService(RoochJsonRpcClient roochJsonRpcClient) {
        this.roochArticleStateRetriever = new RoochArticleStateRetriever(roochJsonRpcClient,
                id -> {
                    ArticleState.MutableArticleState s = new AbstractArticleState.SimpleArticleState();
                    s.setId(id);
                    return s;
                },
                (articleState, commentSeqId) -> (CommentState.MutableCommentState)
                        ((EntityStateCollection.ModifiableEntityStateCollection<BigInteger, CommentState>) articleState.getComments()).getOrAdd(commentSeqId),
                articleId -> {
                    articleEventService.pullCommentTableItemAddedEvents();
                    return commentTableItemAddedRepository.findByArticleCommentId_ArticleId(articleId).stream()
                            .map(i -> i.getArticleCommentId().getCommentSeqId()).collect(Collectors.toList());
                }
        );
    }

    @Transactional
    public void updateArticleState(String objectId) {
        ArticleState articleState = roochArticleStateRetriever.retrieveArticleState(objectId);
        if (articleState == null) {
            return;
        }
        articleStateRepository.merge(articleState);
    }

    @Transactional
    public void deleteArticle(String objectId) {
        ArticleState.MutableArticleState s = (ArticleState.MutableArticleState) articleStateRepository.get(objectId, true);
        if (s != null) {
            s.setDeleted(true);
            articleStateRepository.merge(s);
        }
    }

}

