// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.roochblogdemo.rooch.contract.service;

import com.github.wubuku.rooch.bean.AnnotatedEventView;
import com.github.wubuku.rooch.utils.RoochJsonRpcClient;
import com.github.wubuku.rooch.bean.EventPageView;
import com.github.wubuku.rooch.bean.PageView;

import org.test.roochblogdemo.domain.article.AbstractArticleEvent;
import org.test.roochblogdemo.rooch.contract.ContractConstants;
import org.test.roochblogdemo.rooch.contract.DomainBeanUtils;
import org.test.roochblogdemo.rooch.contract.article.CommentUpdated;
import org.test.roochblogdemo.rooch.contract.article.CommentRemoved;
import org.test.roochblogdemo.rooch.contract.article.CommentAdded;
import org.test.roochblogdemo.rooch.contract.article.ArticleCreated;
import org.test.roochblogdemo.rooch.contract.article.ArticleUpdated;
import org.test.roochblogdemo.rooch.contract.article.ArticleDeleted;
import org.test.roochblogdemo.rooch.contract.repository.ArticleEventRepository;
import org.test.roochblogdemo.rooch.contract.repository.CommentTableItemAddedRepository;
import org.test.roochblogdemo.rooch.contract.CommentTableItemAdded;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.*;
import java.util.*;

@Service
public class ArticleEventService {
    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("ArticleDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    @Value("${rooch.contract.address}")
    private String contractAddress;

    @Autowired
    private RoochJsonRpcClient roochJsonRpcClient;

    @Autowired
    private ArticleEventRepository articleEventRepository;

    @Autowired
    private CommentTableItemAddedRepository commentTableItemAddedRepository;


    @Transactional
    public void updateStatusToProcessed(AbstractArticleEvent event) {
        event.setStatus("D");
        articleEventRepository.save(event);
    }

    @Transactional
    public void pullCommentUpdatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_UPDATED;
        BigInteger cursor = getCommentUpdatedEventNextCursor();
        while (true) {
            EventPageView<CommentUpdated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, CommentUpdated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<CommentUpdated> eventEnvelope : eventPage.getData()) {
                    saveCommentUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getCommentUpdatedEventNextCursor() {
        AbstractArticleEvent.CommentUpdated lastEvent = articleEventRepository.findFirstCommentUpdatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveCommentUpdated(AnnotatedEventView<CommentUpdated> eventEnvelope) {
        AbstractArticleEvent.CommentUpdated commentUpdated = DomainBeanUtils.toCommentUpdated(eventEnvelope);
        if (articleEventRepository.findById(commentUpdated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentUpdated);
    }

    @Transactional
    public void pullCommentRemovedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_REMOVED;
        BigInteger cursor = getCommentRemovedEventNextCursor();
        while (true) {
            EventPageView<CommentRemoved> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, CommentRemoved.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<CommentRemoved> eventEnvelope : eventPage.getData()) {
                    saveCommentRemoved(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getCommentRemovedEventNextCursor() {
        AbstractArticleEvent.CommentRemoved lastEvent = articleEventRepository.findFirstCommentRemovedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveCommentRemoved(AnnotatedEventView<CommentRemoved> eventEnvelope) {
        AbstractArticleEvent.CommentRemoved commentRemoved = DomainBeanUtils.toCommentRemoved(eventEnvelope);
        if (articleEventRepository.findById(commentRemoved.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentRemoved);
    }

    @Transactional
    public void pullCommentAddedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_ADDED;
        BigInteger cursor = getCommentAddedEventNextCursor();
        while (true) {
            EventPageView<CommentAdded> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, CommentAdded.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<CommentAdded> eventEnvelope : eventPage.getData()) {
                    saveCommentAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getCommentAddedEventNextCursor() {
        AbstractArticleEvent.CommentAdded lastEvent = articleEventRepository.findFirstCommentAddedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveCommentAdded(AnnotatedEventView<CommentAdded> eventEnvelope) {
        AbstractArticleEvent.CommentAdded commentAdded = DomainBeanUtils.toCommentAdded(eventEnvelope);
        if (articleEventRepository.findById(commentAdded.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentAdded);
    }

    @Transactional
    public void pullArticleCreatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_CREATED;
        BigInteger cursor = getArticleCreatedEventNextCursor();
        while (true) {
            EventPageView<ArticleCreated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleCreated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<ArticleCreated> eventEnvelope : eventPage.getData()) {
                    saveArticleCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getArticleCreatedEventNextCursor() {
        AbstractArticleEvent.ArticleCreated lastEvent = articleEventRepository.findFirstArticleCreatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleCreated(AnnotatedEventView<ArticleCreated> eventEnvelope) {
        AbstractArticleEvent.ArticleCreated articleCreated = DomainBeanUtils.toArticleCreated(eventEnvelope);
        if (articleEventRepository.findById(articleCreated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleCreated);
    }

    @Transactional
    public void pullArticleUpdatedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_UPDATED;
        BigInteger cursor = getArticleUpdatedEventNextCursor();
        while (true) {
            EventPageView<ArticleUpdated> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleUpdated.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<ArticleUpdated> eventEnvelope : eventPage.getData()) {
                    saveArticleUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getArticleUpdatedEventNextCursor() {
        AbstractArticleEvent.ArticleUpdated lastEvent = articleEventRepository.findFirstArticleUpdatedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleUpdated(AnnotatedEventView<ArticleUpdated> eventEnvelope) {
        AbstractArticleEvent.ArticleUpdated articleUpdated = DomainBeanUtils.toArticleUpdated(eventEnvelope);
        if (articleEventRepository.findById(articleUpdated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleUpdated);
    }

    @Transactional
    public void pullArticleDeletedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_DELETED;
        BigInteger cursor = getArticleDeletedEventNextCursor();
        while (true) {
            EventPageView<ArticleDeleted> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, ArticleDeleted.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<ArticleDeleted> eventEnvelope : eventPage.getData()) {
                    saveArticleDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getArticleDeletedEventNextCursor() {
        AbstractArticleEvent.ArticleDeleted lastEvent = articleEventRepository.findFirstArticleDeletedByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveArticleDeleted(AnnotatedEventView<ArticleDeleted> eventEnvelope) {
        AbstractArticleEvent.ArticleDeleted articleDeleted = DomainBeanUtils.toArticleDeleted(eventEnvelope);
        if (articleEventRepository.findById(articleDeleted.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleDeleted);
    }

    @Transactional
    public void pullCommentTableItemAddedEvents() {
        if (contractAddress == null) {
            return;
        }
        long limit = 1L;
        String eventType = contractAddress + "::" + ContractConstants.COMMENT_TABLE_ITEM_ADDED;
        BigInteger cursor = getCommentTableItemAddedEventNextCursor();
        while (true) {
            EventPageView<CommentTableItemAdded> eventPage = roochJsonRpcClient.getEventsByEventHandle(
                    eventType, cursor, limit, CommentTableItemAdded.class
            );
            if (eventPage != null && eventPage.getData() != null && eventPage.getData().size() > 0) {
                cursor = eventPage.getNextCursor();
                for (AnnotatedEventView<CommentTableItemAdded> eventEnvelope : eventPage.getData()) {
                    saveCommentTableItemAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!PageView.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private BigInteger getCommentTableItemAddedEventNextCursor() {
        org.test.roochblogdemo.rooch.contract.persistence.CommentTableItemAdded lastEvent = commentTableItemAddedRepository.findFirstByOrderByRoochEventId_EventSeqDesc();
        return lastEvent != null ? lastEvent.getRoochEventId().getEventSeq() : null;
    }

    private void saveCommentTableItemAdded(AnnotatedEventView<CommentTableItemAdded> eventEnvelope) {
        org.test.roochblogdemo.rooch.contract.persistence.CommentTableItemAdded commentTableItemAdded = DomainBeanUtils.toPersistenceCommentTableItemAdded(eventEnvelope);
        if (commentTableItemAddedRepository.findById(commentTableItemAdded.getArticleCommentId()).isPresent()) {
            return;
        }
        commentTableItemAddedRepository.save(commentTableItemAdded);
    }

}
